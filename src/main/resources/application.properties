#   application.properties file is used to configure the application. It is used to define the properties of the application such as the database configuration, logging configuration, etc.
#   The spring.jpa.hibernate.ddl-auto property in Spring Boot controls the behavior of the database schema management, particularly in how Hibernate handles the Data Definition Language (DDL) operations, such as creating, updating, or validating the database schema.
#   Here are the common values for spring.jpa.hibernate.ddl-auto and what they do:
#       none: Hibernate will not perform any DDL operations. It will not modify the database schema at all.
#       validate: Hibernate will compare the existing database schema with the entity mappings. If there are discrepancies, it will throw an exception, but it will not alter the schema. Use when ORM is not creating the schemas for your tables rather you are managing/defining the schema yourself - Schema Versioning is done by you, validation is done by ORM.
#       update: Hibernate will attempt to update the existing database schema to match the entity mappings. This is non-destructive and only adds missing changes, such as new columns or tables. However, it does not remove existing tables or columns. Use when ORM is creating the schemas for your tables.
#       create: Hibernate will create a new schema each time the application starts. It will drop all existing tables and recreate them, losing any existing data.
#       create-drop: Similar to create, but in addition to recreating the schema at startup, it will also drop the schema when the application shuts down. This is useful for testing environments where you want a clean database on every run.
#       create-only: This is similar to create, but it only creates the schema without dropping the tables at the start.
#   Best Practices
#       Development: update or create-drop can be useful during development for convenience.
#       Testing: create-drop or create is often used in integration tests where a clean database is needed.
#       Production: Usually, none or validate is recommended in production to prevent unintended schema changes. Schema management is often handled separately through version-controlled scripts and migration tools like Flyway or Liquibase.
# DDL (Data Definition Language) refers to the subset of SQL commands used to define, modify, and manage database structures such as tables, schemas, indexes, and constraints. DDL commands primarily deal with the database schema and structure, rather than manipulating the data itself.

# Microservice will be visible to other services with this name
spring.application.name=productService

# productService is the bean name defined in application.properties for better readability and reusability to be used while autowiring the ProductService interface.
# Uncomment this line to use the FakeStoreProductService implementation
# productService=fakeStoreProductService # Uncomment this line to use the FakeStoreProductService implementation
# Uncomment this line to use the DBProductService implementation
#productService=dBProductService
productService=fakeStoreProductService

# Database Configuration
# spring.jpa.hibernate.ddl-auto=create
# spring.jpa.hibernate.ddl-auto=update
#spring.jpa.hibernate.ddl-auto=validate
# Don't forget to add your database name at the end of URL
spring.datasource.url=jdbc:mysql://localhost:3306/fakestore
spring.datasource.username=root
spring.datasource.password=Nishant21@
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.show-sql: true

# Implementation of having multiple ports to have multiple instances using Environment variables and creating multiple configurations
#server.port=${SERVER_PORTS}
# Uncomment this line to change the default port of the application
server.port = 8000

# Log Configuration
#logging.level.root=TRACE

# Eureka client configurations
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
# eureka.client.region=us-west1
# It specifies the URL where the Eureka server is located. In this case, it's set to http://localhost:8761/eureka/, which is the default URL for a locally running Eureka server.
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/